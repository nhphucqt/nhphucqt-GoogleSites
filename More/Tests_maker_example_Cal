#include <bits/stdc++.h>

using namespace std;

// global const of tests maker
const string name = "Cal"; // Name of tests
const int n_tests = 100; // Number of tests
const int len_id = 3; // You should make len_id >= len(n_tests)
const string ex_in = ".inp";
const string ex_out = ".out";
//

typedef long long ll;

// Sub programs
string To_str(int n)
{
  string s = "";
  while (n > 0)
  {
    s = char(n%10 + 48) + s;
    n /= 10;
  }
  while (s.size() < len_id) s = "0" + s;
  return s;
}

bool prime(int n)
{
  if (n < 2) return false;
  if (n < 4) return true;
  if (n % 2 == 0) return false;
  if (n % 3 == 0) return false;
  for (int i = 5; i*i <= n; i+=6)
    if (n % i == 0 || n % (i+2) == 0) return false;
  return true;
}
//

// Output programs
int Cal(ll n, ll k, int MOD)
{
  if (k == 0) return 1;
  if (k == 1) return (1 + n) % MOD;
  if (k % 2 != 0) return (1+n)*Cal(n*n%MOD, (k-1)/2, MOD) % MOD;
  else return (1 + n*(1+n)%MOD * Cal(n*n%MOD, (k-2)/2, MOD)) % MOD;
}
//

void make_test(string id_s, int id)
{
  ofstream inp(name + '\\' + id_s + '\\' + name + ex_in);
  ofstream out(name + '\\' + id_s + '\\' + name + ex_out);

  const int p6 = 1e6;
  const int p9 = 2e9;
  const ll p18 = 1e18;
  ll n, k;
  int MOD;

  // start process
  n = 1ll * rand() * rand() * rand() * rand() % p18;
  k = 1ll * rand() * rand() * rand() * rand() % p18;
  MOD = rand() * rand() % p9;
  if (id <= 50)
  {
    k %= p6;
    while (prime(MOD)) MOD = rand() * rand() % p9;
    inp << n << ' ' << k << ' ' << MOD;
  }
  else if (id <= 75)
  {
    while (!prime(MOD)) MOD = rand() * rand() % p9;
    inp << n << ' ' << k << ' ' << MOD;
  }
  else
  {
    while (prime(MOD)) MOD = rand() * rand() % p9;
    inp << n << ' ' << k << ' ' << MOD;
  }
  out << Cal(n%MOD, k, MOD);
  // end process

  inp.close();
  out.close();
}

int main()
{
  ios_base::sync_with_stdio(0); cout.tie(0);
  srand(time(NULL));
  system(("rd /s /q " + name).c_str());
  system(("md " + name).c_str());
  for (int it = 1; it <= n_tests; ++it)
  {
    string id = To_str(it);
    system(("md " + name + '\\' + id).c_str());
    make_test(id, it);
    cout << "Test " << it << ": Completed!\n";
  }
  return 0;
}
